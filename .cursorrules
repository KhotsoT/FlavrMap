# Export Patterns
- All React components should use default exports
- Barrel files (index.ts) should re-export using `export { default as ComponentName }`
- Types and utilities should use named exports

# Navigation Patterns
- Stack navigators should be defined in their own files
- Screen components should be imported through barrel files
- Navigation types should be centralized in navigation.types.ts

# Styling Patterns
- Use StyleSheet.create for all styles
- Colors should use consistent hex values (#3B82F6 for primary blue)
- Typography should follow consistent sizing (14px, 16px, 28px)

# State Management Patterns
- Use Zustand for global state management
- Store files should be in src/store directory
- Each store should have its own file with a clear purpose
- Use TypeScript for store definitions

# Firebase Integration Patterns
- Firebase config should be in src/lib/firebase.ts
- Authentication logic should be in src/lib/auth.ts
- Firestore queries should be in respective service files
- Use proper error handling and loading states

# Form Handling Patterns
- All forms should have proper validation
- Use consistent error messages
- Show loading states during async operations
- Disable submit buttons when form is invalid

# Error Handling Patterns
- Use try-catch blocks for async operations
- Show user-friendly error messages
- Log errors for debugging
- Handle network errors gracefully 

# Code Change Confirmation Rule
- NEVER make ANY code changes without explicit user confirmation
- Always propose changes first and wait for approval
- This applies to ALL code modifications, including:
  - Styling changes
  - Type fixes
  - Refactoring
  - New features
  - Bug fixes
- Even small changes require explicit confirmation

---

## 🧠 Smart Meal Planning Logic (Updated Instructions)

### ✅ Default Planning Flow
- The app should default to **"today"** when planning.
- Users can optionally select to plan for:
  - A single day (today or tomorrow)
  - A few days (week)
  - A full month
  - Each period maintains its own budget

### 🕒 Time-Aware Meal Prediction
- The app checks current local time and automatically suggests the **next meal**:
  - Morning (6:00 - 10:00) → suggest breakfast
  - Midday (12:00 - 15:00) → suggest lunch
  - Evening (18:00 - 21:00) → suggest dinner

### 💸 Budget-Aware Meal Selection
- After the user sets a **budget** for the selected period:
  - The app recommends **affordable meals** within budget
  - Tracks remaining budget after selections
  - Shows traditional South African options
  - Prioritizes nutritional balance and variety

### 🍽️ Meal Categories
- **Breakfast Options**:
  - Mieliepap with Chakalaka (R35.00)
  - Vetkoek & Mince (R45.00)
  
- **Lunch Options**:
  - Bobotie (R65.00)
  - Boerewors Roll (R40.00)
  
- **Dinner Options**:
  - Potjiekos (R85.00)
  - Braai Platter (R120.00)

### 🎯 UI/UX Guidelines
- Use bottom sheet modals for input
- Show step indicators for progress
- Display traditional meal indicators
- Clear budget status and remaining amounts
- Support keyboard-aware behavior

### 🔄 State Management
- Track budgets per time period
- Maintain meal selections state
- Calculate remaining budgets
- Handle time-based suggestions

### 🎨 Visual Elements
- Currency: South African Rand (R)
- Colors: Blue primary (#3B82F6)
- Traditional meal indicator: Star icon
- Step completion: Green checkmark

### 🛒 Store Selection (Smart Cart + Price Comparison)
- Search for the **nearest store** offering:
  - Online shopping
  - Delivery options
- Compare prices across stores for ingredients.
- Select the **cheapest available store** that meets delivery and stock criteria.

### 🔮 Optional Features to Include Later
- Let users save and repeat past meal plans.
- Suggest "leftover" meals based on fridge contents or past ingredients.
- Add filters: allergens, dietary restrictions, cuisine preferences.

---
---

## 📅 Weekly Meal Planning UX (Updated Instructions)

### 🧭 Flow: Choosing Days to Plan
- When the user selects the **"Week"** option in the meal planner:
  - A **calendar view** of the current week should appear.
  - Each day (Monday to Sunday) is displayed in a tappable format (e.g., pill buttons, calendar grid).

### 🎯 Day Selection Logic
- The user can **tap on one or more days** they wish to plan meals for.
- When a day is selected:
  - The "Plan Meals" button becomes **enabled** for that specific day.
  - Meals planned for that day should reflect the time-based suggestion logic (e.g., if it's evening, suggest dinner first).

### 💾 Optional Enhancements (Optional to implement later)
- Visually indicate already planned days (e.g., checkmark or color change).
- Allow long-press to clone meal plan from another day.
- Show total estimated budget for selected days.

---
